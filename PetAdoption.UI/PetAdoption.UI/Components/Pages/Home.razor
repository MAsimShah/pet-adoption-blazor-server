@page "/"
@attribute [Authorize]

<PageTitle>Home</PageTitle>


@page "/admin"
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime

<PageTitle>Admin Dashboard - Pet Shelter</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-6" Color="Color.Primary">
        <MudIcon Icon="@Icons.Material.Filled.Dashboard" Class="mr-2" />
        Admin Dashboard
    </MudText>

    <!-- Dashboard Cards Section -->
    <MudGrid Class="mb-6">
        <MudItem xs="12" sm="6" md="3">
            <MudCard Class="pa-4" Style="height: 140px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                <MudCardContent Class="pa-0">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <div>
                            <MudText Typo="Typo.h4" Class="mb-1">120</MudText>
                            <MudText Typo="Typo.body2">Pets Listed</MudText>
                        </div>
                        <MudIcon Icon="@Icons.Material.Filled.Pets" Size="Size.Large" />
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard Class="pa-4" Style="height: 140px; background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white;">
                <MudCardContent Class="pa-0">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <div>
                            <MudText Typo="Typo.h4" Class="mb-1">14</MudText>
                            <MudText Typo="Typo.body2">Pending Requests</MudText>
                        </div>
                        <MudIcon Icon="@Icons.Material.Filled.Inbox" Size="Size.Large" />
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard Class="pa-4" Style="height: 140px; background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white;">
                <MudCardContent Class="pa-0">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <div>
                            <MudText Typo="Typo.h4" Class="mb-1">305</MudText>
                            <MudText Typo="Typo.body2">Active Users</MudText>
                        </div>
                        <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Large" />
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard Class="pa-4" Style="height: 140px; background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%); color: white;">
                <MudCardContent Class="pa-0">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <div>
                            <MudText Typo="Typo.h4" Class="mb-1">89</MudText>
                            <MudText Typo="Typo.body2">Adoptions Approved</MudText>
                        </div>
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" />
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Main Content Grid -->
    <MudGrid>
        <!-- Pending Adoption Requests -->
        <MudItem xs="12" lg="8">
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Inbox" Class="mr-2" />
                            Pending Adoption Requests
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudBadge Content="@pendingRequests.Count" Color="Color.Error" Overlap="true" Class="mx-6 my-4">
                            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" OnClick="RefreshRequests" />
                        </MudBadge>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pa-0">
                    <MudTable Items="@pendingRequests" Dense="true" Hover="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Pet</MudTh>
                            <MudTh>Applicant</MudTh>
                            <MudTh>Date</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Pet">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudAvatar Size="Size.Small" Image="@context.PetImage" />
                                    <div>
                                        <MudText Typo="Typo.body2">@context.PetName</MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">@context.PetBreed</MudText>
                                    </div>
                                </MudStack>
                            </MudTd>
                            <MudTd DataLabel="Applicant">
                                <div>
                                    <MudText Typo="Typo.body2">@context.ApplicantName</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@context.ApplicantEmail</MudText>
                                </div>
                            </MudTd>
                            <MudTd DataLabel="Date">@context.ApplicationDate.ToString("MMM dd, yyyy")</MudTd>
                            <MudTd DataLabel="Actions">
                                <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                                    <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.Check" 
                                              OnClick="@(() => ApproveRequest(context.Id))">
                                        Approve
                                    </MudButton>
                                    <MudButton Color="Color.Error" StartIcon="@Icons.Material.Filled.Close" 
                                              OnClick="@(() => RejectRequest(context.Id))">
                                        Reject
                                    </MudButton>
                                </MudButtonGroup>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Analytics Panel -->
        <MudItem xs="12" lg="4">
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Analytics" Class="mr-2" />
                            Analytics
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Spacing="4">
                        <div>
                            <MudText Typo="Typo.subtitle2" Class="mb-2">Adoptions This Month</MudText>
                            <MudProgressLinear Color="Color.Success" Value="75" Size="Size.Medium" Class="mb-1" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary">23 out of 30 goal</MudText>
                        </div>
                        
                        <MudDivider />
                        
                        <div>
                            <MudText Typo="Typo.subtitle2" Class="mb-3">Most Popular Breeds</MudText>
                            <MudStack Spacing="2">
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.body2">Golden Retriever</MudText>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Primary">28</MudChip>
                                </MudStack>
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.body2">Labrador</MudText>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Secondary">24</MudChip>
                                </MudStack>
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.body2">Mixed Breed</MudText>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Tertiary">19</MudChip>
                                </MudStack>
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.body2">German Shepherd</MudText>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Info">15</MudChip>
                                </MudStack>
                            </MudStack>
                        </div>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Pet Management -->
        <MudItem xs="12" lg="6">
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Pets" Class="mr-2" />
                            Pet Management
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add"
                                  OnClick="OpenAddPetDialog">
                            Add Pet
                        </MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pa-0">
                    <MudTable Items="@pets.Take(5)" Dense="true" Hover="true">
                        <HeaderContent>
                            <MudTh>Pet</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Pet">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudAvatar Size="Size.Small" Image="@context.Image" />
                                    <div>
                                        <MudText Typo="Typo.body2">@context.Name</MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">@context.Breed • @context.Age years</MudText>
                                    </div>
                                </MudStack>
                            </MudTd>
                            <MudTd DataLabel="Status">
                                <MudChip T="string" Size="Size.Small"
                                         Color="@(context.Status == "Available" ? Color.Success : Color.Warning)">
                                    @context.Status
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" 
                                              OnClick="@(() => EditPet(context.Id))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error"
                                              OnClick="@(() => DeletePet(context.Id))" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                    <MudCardActions>
                        <MudButton FullWidth="true" Color="Color.Primary" Variant="Variant.Text">
                            View All Pets
                        </MudButton>
                    </MudCardActions>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- User Management -->
        <MudItem xs="12" lg="6">
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.People" Class="mr-2" />
                            User Management
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="pa-0">
                    <MudTable Items="@users.Take(5)" Dense="true" Hover="true">
                        <HeaderContent>
                            <MudTh>User</MudTh>
                            <MudTh>Role</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="User">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudAvatar Size="Size.Small" Color="Color.Primary">
                                        @context.Name.Substring(0, 1).ToUpper()
                                    </MudAvatar>
                                    <div>
                                        <MudText Typo="Typo.body2">@context.Name</MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">@context.Email</MudText>
                                    </div>
                                </MudStack>
                            </MudTd>
                            <MudTd DataLabel="Role">
                                <MudChip T="string" Size="Size.Small"
                                         Color="@(context.Role == "Admin" ? Color.Error : Color.Primary)">
                                    @context.Role
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" 
                                              OnClick="@(() => EditUser(context.Id))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Block" Size="Size.Small" Color="Color.Warning"
                                              OnClick="@(() => ToggleUserStatus(context.Id))" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                    <MudCardActions>
                        <MudButton FullWidth="true" Color="Color.Primary" Variant="Variant.Text">
                            View All Users
                        </MudButton>
                    </MudCardActions>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

<!-- Add Pet Dialog -->
<MudDialog @bind-IsVisible="showAddPetDialog" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" />
            Add New Pet
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@isFormValid">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="newPet.Name" Label="Pet Name" Required="true" RequiredError="Pet name is required" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="newPet.Breed" Label="Breed" Required="true" RequiredError="Breed is required" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="newPet.Age" Label="Age (years)" Required="true" Min="0" Max="30" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="newPet.Gender" Label="Gender" Required="true">
                        <MudSelectItem Value="@("Male")">Male</MudSelectItem>
                        <MudSelectItem Value="@("Female")">Female</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="newPet.Description" Label="Description" Lines="3" />
                </MudItem>
                <MudItem xs="12">
                    <MudFileUpload T="IBrowserFile" Accept=".jpg,.jpeg,.png" FilesChanged="OnFileChanged">
                            <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" >
                                Upload Photo
                            </MudButton>
                    </MudFileUpload>
                    @if (uploadedFileName != null)
                    {
                        <MudText Typo="Typo.caption" Color="Color.Success" Class="mt-2">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" Class="mr-1" />
                            @uploadedFileName uploaded successfully
                        </MudText>
                    }
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseAddPetDialog">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddPet" Disabled="!isFormValid">
            Add Pet
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool showAddPetDialog = false;
    private DialogOptions dialogOptions = new() { FullWidth = true, MaxWidth = MaxWidth.Medium };
    private MudForm form;
    private bool isFormValid;
    private string uploadedFileName;

    private class AdoptionRequest
    {
        public int Id { get; set; }
        public string PetName { get; set; }
        public string PetBreed { get; set; }
        public string PetImage { get; set; }
        public string ApplicantName { get; set; }
        public string ApplicantEmail { get; set; }
        public DateTime ApplicationDate { get; set; }
    }

    private class Pet
    {
        public int Id { get; set; }
        [Required] public string Name { get; set; }
        [Required] public string Breed { get; set; }
        public int Age { get; set; }
        public string Gender { get; set; }
        public string Description { get; set; }
        public string Image { get; set; }
        public string Status { get; set; }
    }

    private class User
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
        public bool IsActive { get; set; }
    }

    private Pet newPet = new Pet();

    private List<AdoptionRequest> pendingRequests = new List<AdoptionRequest>
    {
        new AdoptionRequest { Id = 1, PetName = "Buddy", PetBreed = "Golden Retriever", PetImage = "https://images.unsplash.com/photo-1552053831-71594a27632d?w=100&h=100&fit=crop&crop=face", ApplicantName = "John Smith", ApplicantEmail = "john@email.com", ApplicationDate = DateTime.Now.AddDays(-2) },
        new AdoptionRequest { Id = 2, PetName = "Luna", PetBreed = "Husky", PetImage = "https://images.unsplash.com/photo-1605568427561-40dd23c2acea?w=100&h=100&fit=crop&crop=face", ApplicantName = "Sarah Johnson", ApplicantEmail = "sarah@email.com", ApplicationDate = DateTime.Now.AddDays(-1) },
        new AdoptionRequest { Id = 3, PetName = "Max", PetBreed = "German Shepherd", PetImage = "https://images.unsplash.com/photo-1589941013453-ec89f33b5e95?w=100&h=100&fit=crop&crop=face", ApplicantName = "Mike Wilson", ApplicantEmail = "mike@email.com", ApplicationDate = DateTime.Now.AddHours(-5) }
    };

    private List<Pet> pets = new List<Pet>
    {
        new Pet { Id = 1, Name = "Buddy", Breed = "Golden Retriever", Age = 3, Gender = "Male", Status = "Available", Image = "https://images.unsplash.com/photo-1552053831-71594a27632d?w=100&h=100&fit=crop&crop=face" },
        new Pet { Id = 2, Name = "Luna", Breed = "Husky", Age = 2, Gender = "Female", Status = "Pending", Image = "https://images.unsplash.com/photo-1605568427561-40dd23c2acea?w=100&h=100&fit=crop&crop=face" },
        new Pet { Id = 3, Name = "Charlie", Breed = "Labrador", Age = 5, Gender = "Male", Status = "Available", Image = "https://images.unsplash.com/photo-1518717758536-85ae29035b6d?w=100&h=100&fit=crop&crop=face" },
        new Pet { Id = 4, Name = "Bella", Breed = "Mixed", Age = 1, Gender = "Female", Status = "Available", Image = "https://images.unsplash.com/photo-1587300003388-59208cc962cb?w=100&h=100&fit=crop&crop=face" },
        new Pet { Id = 5, Name = "Rocky", Breed = "German Shepherd", Age = 4, Gender = "Male", Status = "Adopted", Image = "https://images.unsplash.com/photo-1589941013453-ec89f33b5e95?w=100&h=100&fit=crop&crop=face" }
    };

    private List<User> users = new List<User>
    {
        new User { Id = 1, Name = "John Smith", Email = "john@email.com", Role = "User", IsActive = true },
        new User { Id = 2, Name = "Sarah Johnson", Email = "sarah@email.com", Role = "User", IsActive = true },
        new User { Id = 3, Name = "Admin User", Email = "admin@shelter.com", Role = "Admin", IsActive = true },
        new User { Id = 4, Name = "Mike Wilson", Email = "mike@email.com", Role = "User", IsActive = false },
        new User { Id = 5, Name = "Emma Davis", Email = "emma@email.com", Role = "User", IsActive = true }
    };

    private async Task ApproveRequest(int requestId)
    {
        var request = pendingRequests.FirstOrDefault(r => r.Id == requestId);
        if (request != null)
        {
            pendingRequests.Remove(request);
            await JSRuntime.InvokeVoidAsync("alert", $"Adoption for {request.PetName} approved!");
        }
    }

    private async Task RejectRequest(int requestId)
    {
        var request = pendingRequests.FirstOrDefault(r => r.Id == requestId);
        if (request != null)
        {
            pendingRequests.Remove(request);
            await JSRuntime.InvokeVoidAsync("alert", $"Adoption for {request.PetName} rejected.");
        }
    }

    private void RefreshRequests()
    {
        // In a real app, this would reload data from the server
        StateHasChanged();
    }

    private void OpenAddPetDialog()
    {
        newPet = new Pet();
        uploadedFileName = null;
        showAddPetDialog = true;
    }

    private void CloseAddPetDialog()
    {
        showAddPetDialog = false;
    }

    private async Task AddPet()
    {
        if (isFormValid)
        {
            newPet.Id = pets.Max(p => p.Id) + 1;
            newPet.Status = "Available";
            newPet.Image = "https://images.unsplash.com/photo-1546975490-e8b92a360b24?w=100&h=100&fit=crop&crop=face"; // Default image
            pets.Add(newPet);
            
            await JSRuntime.InvokeVoidAsync("alert", $"{newPet.Name} has been added successfully!");
            CloseAddPetDialog();
        }
    }

    private void OnFileChanged(IBrowserFile file)
    {
        uploadedFileName = file.Name;
        // In a real app, you would upload the file to your server here
    }

    private async Task EditPet(int petId)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Edit pet functionality would open here for pet ID: {petId}");
    }

    private async Task DeletePet(int petId)
    {
        var pet = pets.FirstOrDefault(p => p.Id == petId);
        if (pet != null)
        {
            pets.Remove(pet);
            await JSRuntime.InvokeVoidAsync("alert", $"{pet.Name} has been removed.");
        }
    }

    private async Task EditUser(int userId)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Edit user functionality would open here for user ID: {userId}");
    }

    private async Task ToggleUserStatus(int userId)
    {
        var user = users.FirstOrDefault(u => u.Id == userId);
        if (user != null)
        {
            user.IsActive = !user.IsActive;
            await JSRuntime.InvokeVoidAsync("alert", $"User {user.Name} status changed to {(user.IsActive ? "Active" : "Inactive")}");
        }
    }
}